### VENDIX - Security Logs API Tests
### Archivo para probar el sistema de security logs

@baseUrl = http://localhost:3000/api
@access_token = TU_TOKEN_AQUI

### ============================================
### 0. HEALTH CHECK - Verificar servidor
### ============================================
GET {{baseUrl}}/health

### ============================================
### 1. REGISTRO DE USUARIO PARA TESTING
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Test Organization",
  "email": "testsecurity@example.com",
  "password": "TestPass123!",
  "first_name": "Test",
  "last_name": "User"
}

### ============================================
### 2. LOGIN PARA OBTENER TOKEN
### ============================================
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "testsecurity@example.com",
  "password": "TestPass123!",
  "organizationSlug": "test-organization"
}

### ============================================
### 3. GENERAR EVENTOS DE SEGURIDAD
### ============================================
# Login exitoso (ya generado arriba)

###
# Intento de login fallido
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "testsecurity@example.com",
  "password": "WrongPassword123!",
  "organizationSlug": "test-organization"
}

###
# Otro intento fallido
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "testsecurity@example.com",
  "password": "AnotherWrongPass!",
  "organizationSlug": "test-organization"
}

###
# Logout
POST {{baseUrl}}/auth/logout
Content-Type: application/json
Authorization: Bearer {{access_token}}

{}

### ============================================
### 4. CONSULTAR SECURITY LOGS
### ============================================
GET {{baseUrl}}/security-logs
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 5. FILTRAR POR ACCIÓN
### ============================================
GET {{baseUrl}}/security-logs?action=USER_LOGIN
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 6. FILTRAR POR FECHA
### ============================================
GET {{baseUrl}}/security-logs?dateFrom=2024-01-01&dateTo=2024-12-31
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 7. FILTRAR POR USUARIO
### ============================================
GET {{baseUrl}}/security-logs?userId=1
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 8. ACCESO SIN PERMISOS - 403
### ============================================
# Crear usuario sin permisos de admin
POST {{baseUrl}}/auth/register-staff
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "email": "staff@example.com",
  "password": "StaffPass123!",
  "first_name": "Staff",
  "last_name": "User",
  "role": "staff"
}

### ============================================
### 9. INTENTO DE ACCESO CON USUARIO STAFF
### ============================================
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "staff@example.com",
  "password": "StaffPass123!",
  "organizationSlug": "test-organization"
}

### ============================================
### 10. VERIFICACIÓN EN BD
### ============================================
# SELECT * FROM security_logs WHERE organization_id = 1 ORDER BY created_at DESC LIMIT 10;

### ============================================
### 11. LIMPIEZA - Reset para próximos tests
### ============================================
# DELETE FROM security_logs WHERE organization_id = 1;
# DELETE FROM users WHERE email LIKE 'testsecurity%' OR email LIKE 'staff%';</content>
<parameter name="filePath">/home/rzydev/Vendix/apps/backend/doc/Auth/Security Logs/security-logs-tests.http
