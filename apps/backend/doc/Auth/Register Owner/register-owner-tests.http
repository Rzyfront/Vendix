### VENDIX - Register Owner API Tests
### Archivo para probar el endpoint de registro de propietarios

@baseUrl = http://localhost:3000/api

### ============================================
### 0. HEALTH CHECK - Verificar servidor
### ============================================
GET {{baseUrl}}/health

### ============================================
### 1. REGISTRO EXITOSO - Nuevo Owner
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Mi Tienda Online",
  "email": "owner@test.com",
  "password": "Password@123",
  "first_name": "Juan",
  "last_name": "Pérez",
  "phone": "+521234567890"
}

### ============================================
### 2. REGISTRO - Usuario existente con onboarding pendiente
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Otra Tienda",
  "email": "owner@test.com",
  "password": "Password@123",
  "first_name": "Juan",
  "last_name": "Pérez"
}

### ============================================
### 3. REGISTRO - Email ya existe en organización
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Mi Tienda Online",
  "email": "owner@test.com",
  "password": "Password@456",
  "first_name": "María",
  "last_name": "González"
}

### ============================================
### 4. LOGIN - Después del registro exitoso
### ============================================
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "owner@test.com",
  "password": "Password@123"
}

### ============================================
### 5. REGISTRO - Validación de contraseña débil
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Tienda Débil",
  "email": "weak@test.com",
  "password": "123456",
  "first_name": "Test",
  "last_name": "User"
}

### ============================================
### 6. REGISTRO - Email inválido
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Tienda Email",
  "email": "invalid-email",
  "password": "Password@123",
  "first_name": "Test",
  "last_name": "User"
}

### ============================================
### 7. REGISTRO - Campos requeridos faltantes
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Tienda Incompleta",
  "email": "incomplete@test.com",
  "password": "Password@123"
  // Faltan first_name y last_name
}

### ============================================
### 8. REGISTRO - Organización sin nombre
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "email": "noorg@test.com",
  "password": "Password@123",
  "first_name": "Sin",
  "last_name": "Organización"
}

### ============================================
### 9. REGISTRO - Usuario con username único (manejo de colisiones)
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Tienda Username Test",
  "email": "test.username@test.com",
  "password": "Password@123",
  "first_name": "Username",
  "last_name": "Test"
}

### ============================================
### 10. REGISTRO - Usuario con username único (colisión intencional)
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Tienda Username Test 2",
  "email": "test.username2@test.com",
  "password": "Password@123",
  "first_name": "Username",
  "last_name": "Test"
}

### ============================================
### 11. REGISTRO - Sin teléfono (opcional)
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Tienda Sin Teléfono",
  "email": "notelefono@test.com",
  "password": "Password@123",
  "first_name": "Sin",
  "last_name": "Teléfono"
}

### ============================================
### 12. REGISTRO - Con caracteres especiales en nombre
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Tienda Café & Restaurant",
  "email": "special@test.com",
  "password": "Password@123",
  "first_name": "José",
  "last_name": "Martínez"
}

### ============================================
### 13. REGISTRO - Email con subdominio
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Tienda Subdominio",
  "email": "user@sub.domain.test.com",
  "password": "Password@123",
  "first_name": "Sub",
  "last_name": "Domain"
}

### ============================================
### 14. REGISTRO - Nombre de organización largo
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "Tienda con un nombre muy largo que supera los límites normales de una organización típica en el mercado",
  "email": "longname@test.com",
  "password": "Password@123",
  "first_name": "Nombre",
  "last_name": "Largo"
}

### ============================================
### 15. REGISTRO - Usuario con caracteres especiales en nombre
### ============================================
POST {{baseUrl}}/auth/register-owner
Content-Type: application/json

{
  "organizationName": "balmes_corp",
  "email": "balmescamilobritovargas@gmail.com",
  "password": "Balmes123$",
  "first_name": "balmes",
  "last_name": "brito"
}
