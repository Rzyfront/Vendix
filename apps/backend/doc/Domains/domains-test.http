### VENDIX - Domains API Tests
### Archivo completo para probar todos los endpoints del módulo domains

@baseUrl = http://localhost:3000/api
@access_token = TU_TOKEN_AQUI
@organization_id = TU_ORGANIZATION_ID_AQUI
@store_id = TU_STORE_ID_AQUI
@domain_hostname = test-domain.localhost

### ============================================
### 0. HEALTH CHECK - Verificar servidor
### ============================================
GET {{baseUrl}}/health

### ============================================
### SECCIÓN 1: ENDPOINTS PÚBLICOS (sin autenticación)
### ============================================

### ============================================
### 1.1 RESOLVER CONFIGURACIÓN DE DOMINIO - 200
### ============================================
GET {{baseUrl}}/domains/resolve/{{domain_hostname}}
Content-Type: application/json

### ============================================
### 1.2 RESOLVER CON SUBDOMAIN - 200
### ============================================
GET {{baseUrl}}/domains/resolve/localhost?subdomain=test
Content-Type: application/json

### ============================================
### 1.3 VERIFICAR DISPONIBILIDAD HOSTNAME - 200
### ============================================
GET {{baseUrl}}/domains/check/{{domain_hostname}}
Content-Type: application/json

### ============================================
### 1.4 VERIFICAR HOSTNAME NO DISPONIBLE - 200
### ============================================
GET {{baseUrl}}/domains/check/existing-domain.localhost
Content-Type: application/json

### ============================================
### SECCIÓN 2: ENDPOINTS PRIVADOS (requieren autenticación)
### ============================================

### ============================================
### 2.1 CREAR CONFIGURACIÓN DE DOMINIO - 201
### ============================================
POST {{baseUrl}}/domains
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "hostname": "{{domain_hostname}}",
  "organization_id": {{organization_id}},
  "store_id": {{store_id}},
  "domain_type": "store_custom",
  "status": "pending_dns",
  "ssl_status": "none",
  "is_primary": true,
  "config": {
    "branding": {
      "primaryColor": "#007bff",
      "secondaryColor": "#6c757d",
      "companyName": "Test Company",
      "storeName": "Test Store"
    },
    "seo": {
      "title": "Test Store",
      "description": "A test e-commerce store",
      "keywords": ["test", "store", "ecommerce"]
    },
    "features": {
      "multiStore": true,
      "analytics": true,
      "customDomain": true
    },
    "theme": {
      "layout": "sidebar",
      "colorScheme": "light"
    },
    "ecommerce": {
      "currency": "COP",
      "locale": "es-CO"
    }
  }
}

### ============================================
### 2.2 LISTAR TODOS LOS DOMINIOS - 200
### ============================================
GET {{baseUrl}}/domains
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 2.3 LISTAR CON FILTROS - ORGANIZACIÓN - 200
### ============================================
GET {{baseUrl}}/domains?organization_id={{organization_id}}&limit=10&offset=0
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 2.4 LISTAR CON FILTROS - TIENDA - 200
### ============================================
GET {{baseUrl}}/domains?store_id={{store_id}}&search=test
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 2.5 OBTENER DOMINIO POR HOSTNAME - 200
### ============================================
GET {{baseUrl}}/domains/hostname/{{domain_hostname}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 2.6 OBTENER DOMINIO POR ID - 200
### ============================================
GET {{baseUrl}}/domains/1
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 2.7 ACTUALIZAR CONFIGURACIÓN DE DOMINIO - 200
### ============================================
PUT {{baseUrl}}/domains/hostname/{{domain_hostname}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "status": "active",
  "ssl_status": "issued",
  "config": {
    "branding": {
      "primaryColor": "#ff6b6b",
      "secondaryColor": "#4ecdc4",
      "companyName": "Updated Test Company"
    }
  }
}

### ============================================
### 2.8 MARCAR COMO PRIMARIO - 200
### ============================================
PUT {{baseUrl}}/domains/hostname/{{domain_hostname}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "is_primary": true
}

### ============================================
### 2.9 DUPLICAR CONFIGURACIÓN DE DOMINIO - 200
### ============================================
POST {{baseUrl}}/domains/hostname/{{domain_hostname}}/duplicate
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "newHostname": "duplicated-{{domain_hostname}}"
}

### ============================================
### 2.10 LISTAR DOMINIOS POR ORGANIZACIÓN - 200
### ============================================
GET {{baseUrl}}/domains/organization/{{organization_id}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 2.11 LISTAR DOMINIOS POR TIENDA - 200
### ============================================
GET {{baseUrl}}/domains/store/{{store_id}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 2.12 VALIDAR FORMATO DE HOSTNAME - 200
### ============================================
POST {{baseUrl}}/domains/validate-hostname
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "hostname": "valid-hostname.com"
}

### ============================================
### 2.13 VERIFICAR CONFIGURACIÓN DNS - 200
### ============================================
POST {{baseUrl}}/domains/hostname/{{domain_hostname}}/verify
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "checks": ["txt", "cname"],
  "expectedCname": "edge.vendix.com",
  "expectedA": ["203.0.113.10"],
  "force": false
}

### ============================================
### 2.14 VERIFICACIÓN FORZADA - 200
### ============================================
POST {{baseUrl}}/domains/hostname/{{domain_hostname}}/verify
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "checks": ["txt", "cname", "a"],
  "force": true
}

### ============================================
### SECCIÓN 3: CASOS DE ERROR
### ============================================

### ============================================
### 3.1 INTENTAR ACCEDER SIN AUTENTICACIÓN - 401
### ============================================
GET {{baseUrl}}/domains
Content-Type: application/json

### ============================================
### 3.2 CREAR DOMINIO CON HOSTNAME DUPLICADO - 409
### ============================================
POST {{baseUrl}}/domains
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "hostname": "{{domain_hostname}}",
  "organization_id": {{organization_id}},
  "config": {}
}

### ============================================
### 3.3 CREAR DOMINIO CON ORGANIZACIÓN INEXISTENTE - 404
### ============================================
POST {{baseUrl}}/domains
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "hostname": "new-domain.localhost",
  "organization_id": 99999,
  "config": {}
}

### ============================================
### 3.4 OBTENER DOMINIO INEXISTENTE POR HOSTNAME - 404
### ============================================
GET {{baseUrl}}/domains/hostname/nonexistent.localhost
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 3.5 OBTENER DOMINIO INEXISTENTE POR ID - 404
### ============================================
GET {{baseUrl}}/domains/99999
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 3.6 ACTUALIZAR DOMINIO INEXISTENTE - 404
### ============================================
PUT {{baseUrl}}/domains/hostname/nonexistent.localhost
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "status": "active"
}

### ============================================
### 3.7 DUPLICAR DOMINIO INEXISTENTE - 404
### ============================================
POST {{baseUrl}}/domains/hostname/nonexistent.localhost/duplicate
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "newHostname": "new-duplicate.localhost"
}

### ============================================
### 3.8 VALIDAR HOSTNAME MAL FORMADO - 400
### ============================================
POST {{baseUrl}}/domains/validate-hostname
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "hostname": "invalid..hostname.com"
}

### ============================================
### 3.9 VERIFICAR DOMINIO INEXISTENTE - 404
### ============================================
POST {{baseUrl}}/domains/hostname/nonexistent.localhost/verify
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "checks": ["txt"]
}

### ============================================
### 3.10 LISTAR CON PARÁMETROS INVÁLIDOS - 400
### ============================================
GET {{baseUrl}}/domains?organization_id=invalid&limit=-1
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 3.11 RESOLVER DOMINIO INEXISTENTE - 404
### ============================================
GET {{baseUrl}}/domains/resolve/nonexistent.localhost
Content-Type: application/json

### ============================================
### SECCIÓN 4: LIMPIEZA Y VERIFICACIÓN FINAL
### ============================================

### ============================================
### 4.1 ELIMINAR DOMINIO CREADO - 204
### ============================================
DELETE {{baseUrl}}/domains/hostname/{{domain_hostname}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 4.2 ELIMINAR DOMINIO DUPLICADO - 204
### ============================================
DELETE {{baseUrl}}/domains/hostname/duplicated-{{domain_hostname}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### 4.3 VERIFICAR QUE YA NO EXISTE - 404
### ============================================
GET {{baseUrl}}/domains/hostname/{{domain_hostname}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ============================================
### VERIFICACIÓN EN BASE DE DATOS
### ============================================

### ============================================
### 4.4 VERIFICAR DATOS EN BD
### ============================================
# SELECT
#   ds.id, ds.hostname, ds.organization_id, ds.store_id,
#   ds.domain_type, ds.status, ds.ssl_status, ds.is_primary,
#   ds.created_at, ds.updated_at,
#   o.name as org_name,
#   s.name as store_name
# FROM domain_settings ds
# LEFT JOIN organizations o ON ds.organization_id = o.id
# LEFT JOIN stores s ON ds.store_id = s.id
# WHERE ds.hostname LIKE '%test-domain%'
# ORDER BY ds.created_at DESC;

### ============================================
### 4.5 VERIFICAR CACHÉ (si aplica)
### ============================================
# SELECT * FROM redis WHERE key LIKE 'domain:*';