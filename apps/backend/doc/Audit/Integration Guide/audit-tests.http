# Audit API - Pruebas HTTP

## üìã Descripci√≥n General

Este archivo contiene ejemplos de requests HTTP para probar la API de auditor√≠a de Vendix. Incluye casos de uso comunes y escenarios de prueba.

## üèóÔ∏è Configuraci√≥n Base

### Variables de Entorno
```bash
# Base URL de la API
BASE_URL=http://localhost:3000

# Token de autenticaci√≥n (obtener despu√©s del login)
AUTH_TOKEN=your_jwt_token_here

# Headers comunes
HEADERS="-H 'Authorization: Bearer $AUTH_TOKEN' -H 'Content-Type: application/json'"
```

### Obtener Token de Autenticaci√≥n
```bash
# POST /auth/login
curl -X POST $BASE_URL/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "admin@vendix.com",
    "password": "admin123"
  }'
```

## üöÄ Endpoints de Auditor√≠a

### 1. Obtener Logs de Auditor√≠a

#### Consulta B√°sica
```bash
# GET /audit/logs
curl -X GET "$BASE_URL/audit/logs" \
  $HEADERS
```

#### Consulta con Paginaci√≥n
```bash
# GET /audit/logs?page=1&limit=10
curl -X GET "$BASE_URL/audit/logs?page=1&limit=10" \
  $HEADERS
```

#### Filtrar por Usuario
```bash
# GET /audit/logs?userId=123
curl -X GET "$BASE_URL/audit/logs?userId=123" \
  $HEADERS
```

#### Filtrar por Acci√≥n
```bash
# GET /audit/logs?action=CREATE
curl -X GET "$BASE_URL/audit/logs?action=CREATE" \
  $HEADERS
```

#### Filtrar por Recurso
```bash
# GET /audit/logs?resource=products
curl -X GET "$BASE_URL/audit/logs?resource=products" \
  $HEADERS
```

#### Filtrar por Rango de Fechas
```bash
# GET /audit/logs?fromDate=2025-01-01&toDate=2025-01-31
curl -X GET "$BASE_URL/audit/logs?fromDate=2025-01-01&toDate=2025-01-31" \
  $HEADERS
```

#### Combinar M√∫ltiples Filtros
```bash
# GET /audit/logs?userId=123&action=UPDATE&resource=products&fromDate=2025-01-01
curl -X GET "$BASE_URL/audit/logs?userId=123&action=UPDATE&resource=products&fromDate=2025-01-01" \
  $HEADERS
```

### 2. Obtener Estad√≠sticas de Auditor√≠a

#### Estad√≠sticas Generales
```bash
# GET /audit/stats
curl -X GET "$BASE_URL/audit/stats" \
  $HEADERS
```

#### Estad√≠sticas por Per√≠odo
```bash
# GET /audit/stats?fromDate=2025-01-01&toDate=2025-01-31
curl -X GET "$BASE_URL/audit/stats?fromDate=2025-01-01&toDate=2025-01-31" \
  $HEADERS
```

#### Estad√≠sticas de Hoy
```bash
# GET /audit/stats?fromDate=2025-01-15&toDate=2025-01-15
FROM_DATE=$(date +%Y-%m-%d)
curl -X GET "$BASE_URL/audit/stats?fromDate=$FROM_DATE&toDate=$FROM_DATE" \
  $HEADERS
```

## üß™ Casos de Prueba

### Prueba 1: Verificar Logs de Creaci√≥n de Producto
```bash
# 1. Crear un producto primero
curl -X POST "$BASE_URL/products" \
  $HEADERS \
  -d '{
    "name": "Producto de Prueba",
    "sku": "TEST-001",
    "base_price": 29.99,
    "store_id": 1
  }'

# 2. Verificar que se cre√≥ el log de auditor√≠a
curl -X GET "$BASE_URL/audit/logs?resource=products&action=CREATE" \
  $HEADERS
```

### Prueba 2: Verificar Logs de Login
```bash
# 1. Hacer login
curl -X POST "$BASE_URL/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "user@vendix.com",
    "password": "password123"
  }'

# 2. Verificar logs de autenticaci√≥n
curl -X GET "$BASE_URL/audit/logs?resource=auth&action=LOGIN" \
  $HEADERS
```

### Prueba 3: Verificar Logs de Usuario Espec√≠fico
```bash
# Obtener logs de un usuario espec√≠fico
USER_ID=123
curl -X GET "$BASE_URL/audit/logs?userId=$USER_ID" \
  $HEADERS
```

### Prueba 4: Verificar Estad√≠sticas Diarias
```bash
# Estad√≠sticas del d√≠a actual
FROM_DATE=$(date +%Y-%m-%d)
curl -X GET "$BASE_URL/audit/stats?fromDate=$FROM_DATE&toDate=$FROM_DATE" \
  $HEADERS
```

### Prueba 5: Verificar Paginaci√≥n
```bash
# Primera p√°gina
curl -X GET "$BASE_URL/audit/logs?page=1&limit=5" \
  $HEADERS

# Segunda p√°gina
curl -X GET "$BASE_URL/audit/logs?page=2&limit=5" \
  $HEADERS
```

## üö® Pruebas de Error

### Error 401: No Autorizado
```bash
# Sin token de autenticaci√≥n
curl -X GET "$BASE_URL/audit/logs" \
  -H "Content-Type: application/json"
```

### Error 403: Permisos Insuficientes
```bash
# Usuario sin permisos de auditor√≠a
curl -X GET "$BASE_URL/audit/logs" \
  -H "Authorization: Bearer $USER_TOKEN" \
  -H "Content-Type: application/json"
```

### Error 400: Par√°metros Inv√°lidos
```bash
# Fecha inv√°lida
curl -X GET "$BASE_URL/audit/logs?fromDate=invalid-date" \
  $HEADERS
```

### Error 404: Recurso No Encontrado
```bash
# Endpoint inexistente
curl -X GET "$BASE_URL/audit/non-existent" \
  $HEADERS
```

## üìä Consultas Avanzadas

### Logs de M√∫ltiples Recursos
```bash
# Usando m√∫ltiples valores (si est√° implementado)
curl -X GET "$BASE_URL/audit/logs?resources=products,orders,users" \
  $HEADERS
```

### Logs con Ordenamiento
```bash
# Ordenar por fecha descendente (si est√° implementado)
curl -X GET "$BASE_URL/audit/logs?sort=created_at&order=desc" \
  $HEADERS
```

### B√∫squeda por Texto
```bash
# Buscar en metadatos (si est√° implementado)
curl -X GET "$BASE_URL/audit/logs?search=producto" \
  $HEADERS
```

## üîÑ Pruebas de Integraci√≥n

### Flujo Completo: Crear ‚Üí Actualizar ‚Üí Eliminar
```bash
# 1. Crear producto
CREATE_RESPONSE=$(curl -X POST "$BASE_URL/products" \
  $HEADERS \
  -d '{
    "name": "Producto Temporal",
    "sku": "TEMP-001",
    "base_price": 19.99,
    "store_id": 1
  }')

PRODUCT_ID=$(echo $CREATE_RESPONSE | jq -r '.id')

# 2. Actualizar producto
curl -X PUT "$BASE_URL/products/$PRODUCT_ID" \
  $HEADERS \
  -d '{
    "name": "Producto Actualizado",
    "base_price": 24.99
  }'

# 3. Eliminar producto
curl -X DELETE "$BASE_URL/products/$PRODUCT_ID" \
  $HEADERS

# 4. Verificar todos los logs
curl -X GET "$BASE_URL/audit/logs?resource=products&resourceId=$PRODUCT_ID" \
  $HEADERS
```

### Flujo de Autenticaci√≥n
```bash
# 1. Login exitoso
curl -X POST "$BASE_URL/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "user@vendix.com",
    "password": "password123"
  }'

# 2. Login fallido
curl -X POST "$BASE_URL/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "user@vendix.com",
    "password": "wrongpassword"
  }'

# 3. Verificar logs de autenticaci√≥n
curl -X GET "$BASE_URL/audit/logs?resource=auth" \
  $HEADERS
```

## üìà Pruebas de Rendimiento

### Carga de Datos
```bash
# Generar m√∫ltiples logs para pruebas de rendimiento
for i in {1..100}; do
  curl -X POST "$BASE_URL/products" \
    $HEADERS \
    -d "{
      \"name\": \"Producto $i\",
      \"sku\": \"PERF-$i\",
      \"base_price\": 9.99,
      \"store_id\": 1
    }" &
done
wait

# Verificar rendimiento de consultas
time curl -X GET "$BASE_URL/audit/logs?resource=products" \
  $HEADERS
```

### Pruebas de Concurrecia
```bash
# M√∫ltiples operaciones concurrentes
for i in {1..10}; do
  curl -X GET "$BASE_URL/audit/logs?page=$i&limit=10" \
    $HEADERS &
done
wait
```

## üîß Scripts de Automatizaci√≥n

### Script de Setup
```bash
#!/bin/bash
# setup-audit-tests.sh

echo "Setting up audit tests..."

# Obtener token de admin
TOKEN=$(curl -X POST $BASE_URL/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email": "admin@vendix.com", "password": "admin123"}' \
  | jq -r '.access_token')

echo "Token obtained: $TOKEN"

# Exportar para usar en otros scripts
export AUTH_TOKEN=$TOKEN
export BASE_URL=$BASE_URL
```

### Script de Limpieza
```bash
#!/bin/bash
# cleanup-audit-tests.sh

echo "Cleaning up test data..."

# Eliminar logs de prueba (si endpoint existe)
curl -X DELETE "$BASE_URL/audit/logs/test-data" \
  -H "Authorization: Bearer $AUTH_TOKEN"

echo "Cleanup completed"
```

### Script de Monitoreo
```bash
#!/bin/bash
# monitor-audit.sh

while true; do
  echo "$(date): Checking audit health..."
  curl -X GET "$BASE_URL/audit/stats" \
    -H "Authorization: Bearer $AUTH_TOKEN" \
    -s | jq '.totalLogs'

  sleep 60
done
```

## üìù Notas Importantes

1. **Autenticaci√≥n**: Todos los endpoints requieren un token JWT v√°lido
2. **Permisos**: Solo usuarios con roles 'admin' o 'auditor' pueden acceder
3. **Paginaci√≥n**: Usar par√°metros `page` y `limit` para grandes conjuntos de datos
4. **Fechas**: Formato ISO 8601 (YYYY-MM-DDTHH:mm:ssZ)
5. **L√≠mites**: M√°ximo 100 registros por p√°gina
6. **Timeouts**: Requests pueden tardar en datasets grandes

## üêõ Troubleshooting

### Problema: No se ven logs
```bash
# Verificar permisos
curl -X GET "$BASE_URL/auth/me" \
  -H "Authorization: Bearer $AUTH_TOKEN"

# Verificar configuraci√≥n de BD
curl -X GET "$BASE_URL/health" \
  $HEADERS
```

### Problema: Errores de paginaci√≥n
```bash
# Verificar par√°metros
curl -X GET "$BASE_URL/audit/logs?page=1&limit=10" \
  $HEADERS \
  -v  # Verbose output
```

### Problema: Errores de fecha
```bash
# Verificar formato de fecha
curl -X GET "$BASE_URL/audit/logs?fromDate=2025-01-01T00:00:00Z" \
  $HEADERS
```

Estos tests HTTP proporcionan una cobertura completa para validar el funcionamiento del sistema de auditor√≠a en diferentes escenarios y casos de uso.</content>
<parameter name="filePath">/home/rzydev/Vendix/apps/backend/doc/Audit/Integration Guide/audit-tests.http
