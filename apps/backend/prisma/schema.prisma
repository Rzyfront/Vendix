generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                        Int                         @id @default(autoincrement())
  username                  String                      @unique @db.VarChar(50)
  email                     String                      @db.VarChar(255)
  password                  String
  state                     user_state_enum             @default(pending_verification)
  last_login                DateTime?                   @db.Timestamp(6)
  failed_login_attempts     Int                         @default(0)
  locked_until              DateTime?                   @db.Timestamp(6)
  email_verified            Boolean                     @default(false)
  two_factor_enabled        Boolean                     @default(false)
  two_factor_secret         String?
  created_at                DateTime?                   @default(now()) @db.Timestamp(6)
  updated_at                DateTime?                   @default(now()) @db.Timestamp(6)
  first_name                String                      @db.VarChar(100)
  last_name                 String                      @db.VarChar(100)
  onboarding_completed      Boolean                     @default(false)
  organization_id           Int
  addresses                 addresses[]                 @relation("user_addresses")
  api_keys                  api_keys[]
  audit_logs                audit_logs[]
  email_verification_tokens email_verification_tokens[]
  inventory_transactions    inventory_transactions[]
  password_reset_tokens     password_reset_tokens[]
  refresh_tokens            refresh_tokens[]
  refunds                   refunds[]
  reviews                   reviews[]
  store_users               store_users[]
  user_roles                user_roles[]
  user_sessions             user_sessions[]
  organizations             organizations               @relation(fields: [organization_id], references: [id], onUpdate: NoAction)

  @@index([onboarding_completed])
  @@index([email_verified])
  @@index([state])
}

/// Relaci√≥n flexible entre usuarios y tiendas (clientes, staff, managers, etc)
model store_users {
  id        Int      @id @default(autoincrement())
  store_id  Int
  user_id   Int
  createdAt DateTime @default(now())
  store     stores   @relation(fields: [store_id], references: [id])
  user      users    @relation(fields: [user_id], references: [id])

  @@unique([store_id, user_id])
}

model roles {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(50)
  description      String?
  is_system_role   Boolean            @default(false)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model permissions {
  id               Int                    @id @default(autoincrement())
  name             String                 @unique @db.VarChar(100)
  description      String?
  path             String                 @db.VarChar(255)
  method           http_method_enum
  status           permission_status_enum @default(active)
  created_at       DateTime?              @default(now()) @db.Timestamp(6)
  updated_at       DateTime?              @default(now()) @db.Timestamp(6)
  role_permissions role_permissions[]

  @@unique([path, method])
}

model user_roles {
  id      Int    @id @default(autoincrement())
  user_id Int?
  role_id Int?
  roles   roles? @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users   users? @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@unique([user_id, role_id])
}

model role_permissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  granted       Boolean     @default(true)
  created_at    DateTime?   @default(now()) @db.Timestamp(6)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([role_id, permission_id])
}

model refresh_tokens {
  id                 Int       @id @default(autoincrement())
  user_id            Int?
  token              String
  device_info        String?
  expires_at         DateTime  @db.Timestamp(6)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  device_fingerprint String?   @db.VarChar(255)
  ip_address         String?   @db.VarChar(45)
  last_used          DateTime? @db.Timestamp(6)
  revoked            Boolean   @default(false)
  revoked_at         DateTime? @db.Timestamp(6)
  revoked_reason     String?   @db.VarChar(255)
  updated_at         DateTime? @default(now()) @db.Timestamp(6)
  user_agent         String?
  users              users?    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@index([user_id, revoked])
  @@index([expires_at])
  @@index([revoked])
  @@index([ip_address])
  @@index([last_used])
}

model user_sessions {
  id            Int       @id @default(autoincrement())
  user_id       Int
  session_id    String    @unique
  ip_address    String?   @db.VarChar(45)
  user_agent    String?
  device_info   String?
  location      String?   @db.VarChar(100)
  is_active     Boolean   @default(true)
  last_activity DateTime? @db.Timestamp(6)
  expires_at    DateTime  @db.Timestamp(6)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model login_attempts {
  id             Int       @id @default(autoincrement())
  email          String    @db.VarChar(255)
  ip_address     String?   @db.VarChar(45)
  user_agent     String?
  success        Boolean
  failure_reason String?   @db.VarChar(100)
  attempted_at   DateTime? @default(now()) @db.Timestamp(6)
  store_id       Int?
  stores         stores?   @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
}

model password_reset_tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique
  expires_at DateTime  @db.Timestamp(6)
  used       Boolean   @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model email_verification_tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique
  expires_at DateTime  @db.Timestamp(6)
  verified   Boolean   @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model audit_logs {
  id              Int            @id @default(autoincrement())
  user_id         Int?
  action          String         @db.VarChar(100)
  resource        String         @db.VarChar(100)
  resource_id     Int?
  old_values      Json?
  new_values      Json?
  ip_address      String?        @db.VarChar(45)
  user_agent      String?
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  organization_id Int?
  store_id        Int?
  organizations   organizations? @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  stores          stores?        @relation(fields: [store_id], references: [id], onUpdate: NoAction)
  users           users?         @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model organizations {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  slug                  String                  @unique @db.VarChar(255)
  legal_name            String?                 @db.VarChar(255)
  tax_id                String?                 @unique @db.VarChar(50)
  email                 String                  @db.VarChar(255)
  phone                 String?                 @db.VarChar(50)
  website               String?                 @db.VarChar(255)
  description           String?
  state                 organization_state_enum @default(draft)
  created_at            DateTime?               @default(now()) @db.Timestamp(6)
  updated_at            DateTime?               @default(now()) @db.Timestamp(6)
  addresses             addresses[]
  audit_logs            audit_logs[]
  domain_settings       domain_settings[]
  organization_settings organization_settings?
  stores                stores[]
  users                 users[]
}

model organization_settings {
  id              Int           @id @default(autoincrement())
  organization_id Int           @unique
  config          Json
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  updated_at      DateTime?     @default(now()) @db.Timestamp(6)
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

model stores {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  slug            String            @db.VarChar(255)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  is_active       Boolean           @default(true)
  manager_user_id Int?
  organization_id Int
  store_code      String?           @unique @db.VarChar(20)
  store_type      store_type_enum   @default(physical)
  timezone        String?           @db.VarChar(50)
  addresses       addresses[]
  audit_logs      audit_logs[]
  categories      categories[]
  domain_settings domain_settings[]
  login_attempts  login_attempts[]
  orders          orders[]
  payment_methods payment_methods[]
  products        products[]
  store_settings  store_settings?
  store_users     store_users[]
  organizations   organizations     @relation(fields: [organization_id], references: [id])
  tax_categories  tax_categories[]
  tax_rates       tax_rates[]

  @@unique([organization_id, slug])
}

model store_settings {
  id         Int       @id @default(autoincrement())
  store_id   Int       @unique
  settings   Json?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  stores     stores    @relation(fields: [store_id], references: [id], onUpdate: NoAction)
}

model domain_settings {
  id                 Int                @id @default(autoincrement())
  hostname           String             @unique @db.VarChar(255)
  organization_id    Int?
  store_id           Int?
  config             Json
  created_at         DateTime?          @default(now()) @db.Timestamp(6)
  updated_at         DateTime?          @default(now()) @db.Timestamp(6)
  domain_type        domain_type_enum   @default(organization)
  is_primary         Boolean            @default(false)
  last_error         String?            @db.VarChar(255)
  last_verified_at   DateTime?          @db.Timestamp(6)
  ssl_status         ssl_status_enum    @default(none)
  status             domain_status_enum @default(active)
  verification_token String?            @unique @db.VarChar(100)
  organization       organizations?     @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  store              stores?            @relation(fields: [store_id], references: [id], onDelete: Cascade)

  @@index([hostname])
  @@index([organization_id])
  @@index([store_id])
  @@index([status])
  @@index([domain_type])
}

model addresses {
  id                                           Int               @id @default(autoincrement())
  store_id                                     Int?
  address_line1                                String
  address_line2                                String?
  city                                         String            @db.VarChar(100)
  state_province                               String?           @db.VarChar(100)
  country_code                                 String            @db.VarChar(3)
  postal_code                                  String?           @db.VarChar(20)
  phone_number                                 String?           @db.VarChar(50)
  type                                         address_type_enum @default(shipping)
  is_primary                                   Boolean           @default(false)
  latitude                                     Decimal?          @db.Decimal(10, 8)
  longitude                                    Decimal?          @db.Decimal(11, 8)
  organization_id                              Int?
  user_id                                      Int?
  organizations                                organizations?    @relation(fields: [organization_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  stores                                       stores?           @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users                                        users?            @relation("user_addresses", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  orders_orders_billing_address_idToaddresses  orders[]          @relation("orders_billing_address_idToaddresses")
  orders_orders_shipping_address_idToaddresses orders[]          @relation("orders_shipping_address_idToaddresses")
}

model brands {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(100)
  description String?
  logo_url    String?
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  updated_at  DateTime?  @default(now()) @db.Timestamp(6)
  products    products[]
}

model categories {
  id                 Int                  @id @default(autoincrement())
  store_id           Int?
  name               String               @db.VarChar(255)
  slug               String               @db.VarChar(255)
  description        String?
  image_url          String?
  state              category_state_enum  @default(active)
  stores             stores?              @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  product_categories product_categories[]
  products           products[]

  @@unique([store_id, slug])
}

model currencies {
  code           String              @id @db.VarChar(3)
  name           String              @unique @db.VarChar(255)
  symbol         String              @db.VarChar(10)
  decimal_places Int                 @default(2) @db.SmallInt
  state          currency_state_enum @default(active)
}

model inventory_transactions {
  id                 Int                             @id @default(autoincrement())
  product_id         Int
  product_variant_id Int?
  user_id            Int?
  order_item_id      Int?
  type               inventory_transaction_type_enum
  notes              String?
  transaction_date   DateTime?                       @default(now()) @db.Timestamp(6)
  quantity_change    Int
  created_at         DateTime?                       @default(now()) @db.Timestamp(6)
  order_items        order_items?                    @relation(fields: [order_item_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  products           products                        @relation(fields: [product_id], references: [id], onUpdate: NoAction)
  product_variants   product_variants?               @relation(fields: [product_variant_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users              users?                          @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
}

model order_item_taxes {
  id            Int         @id @default(autoincrement())
  order_item_id Int
  tax_rate_id   Int?
  tax_name      String      @db.VarChar(100)
  tax_rate      Decimal     @db.Decimal(6, 5)
  tax_amount    Decimal     @db.Decimal(12, 2)
  is_compound   Boolean?
  created_at    DateTime?   @default(now()) @db.Timestamp(6)
  order_items   order_items @relation(fields: [order_item_id], references: [id], onUpdate: NoAction)
  tax_rates     tax_rates?  @relation(fields: [tax_rate_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model order_items {
  id                     Int                      @id @default(autoincrement())
  order_id               Int
  product_id             Int?
  product_variant_id     Int?
  product_name           String                   @db.VarChar(255)
  variant_sku            String?                  @db.VarChar(100)
  variant_attributes     String?
  quantity               Int
  unit_price             Decimal                  @db.Decimal(12, 2)
  total_price            Decimal                  @db.Decimal(12, 2)
  tax_rate               Decimal?                 @db.Decimal(6, 5)
  tax_amount_item        Decimal?                 @db.Decimal(12, 2)
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @db.Timestamp(6)
  inventory_transactions inventory_transactions[]
  order_item_taxes       order_item_taxes[]
  orders                 orders                   @relation(fields: [order_id], references: [id], onUpdate: NoAction)
  products               products?                @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  product_variants       product_variants?        @relation(fields: [product_variant_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  refund_items           refund_items[]
}

model orders {
  id                                              Int              @id @default(autoincrement())
  store_id                                        Int
  customer_id                                     Int
  order_number                                    String           @unique @db.VarChar(50)
  shipping_address_id                             Int?
  billing_address_id                              Int?
  shipping_address_snapshot                       Json?
  billing_address_snapshot                        Json?
  currency                                        String           @db.VarChar(10)
  subtotal_amount                                 Decimal          @default(0.00) @db.Decimal(12, 2)
  discount_amount                                 Decimal          @default(0.00) @db.Decimal(12, 2)
  tax_amount                                      Decimal          @default(0.00) @db.Decimal(12, 2)
  shipping_cost                                   Decimal          @default(0.00) @db.Decimal(12, 2)
  grand_total                                     Decimal          @default(0.00) @db.Decimal(12, 2)
  state                                           order_state_enum @default(created)
  internal_notes                                  String?
  created_at                                      DateTime?        @default(now()) @db.Timestamp(6)
  updated_at                                      DateTime?        @default(now()) @db.Timestamp(6)
  placed_at                                       DateTime?        @db.Timestamp(6)
  completed_at                                    DateTime?        @db.Timestamp(6)
  order_items                                     order_items[]
  addresses_orders_billing_address_idToaddresses  addresses?       @relation("orders_billing_address_idToaddresses", fields: [billing_address_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  addresses_orders_shipping_address_idToaddresses addresses?       @relation("orders_shipping_address_idToaddresses", fields: [shipping_address_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  stores                                          stores           @relation(fields: [store_id], references: [id], onUpdate: NoAction)
  payments                                        payments[]
  refunds                                         refunds[]
}

model payment_methods {
  id       Int                       @id @default(autoincrement())
  store_id Int
  name     String                    @db.VarChar(100)
  type     payment_methods_type_enum
  provider String?                   @db.VarChar(100)
  config   Json?
  state    payment_method_state_enum
  stores   stores                    @relation(fields: [store_id], references: [id], onUpdate: NoAction)
  payments payments[]
}

model payments {
  id                Int                 @id @default(autoincrement())
  order_id          Int
  customer_id       Int?
  payment_method_id Int?
  amount            Decimal             @db.Decimal(12, 2)
  currency          String              @db.VarChar(10)
  state             payments_state_enum
  transaction_id    String?             @unique @db.VarChar(255)
  gateway_response  Json?
  paid_at           DateTime?           @db.Timestamp(6)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  orders            orders              @relation(fields: [order_id], references: [id], onUpdate: NoAction)
  payment_methods   payment_methods?    @relation(fields: [payment_method_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  refunds           refunds[]
}

model product_categories {
  product_id  Int
  category_id Int
  categories  categories @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  products    products   @relation(fields: [product_id], references: [id], onUpdate: NoAction)

  @@id([product_id, category_id])
}

model product_images {
  id               Int                @id @default(autoincrement())
  product_id       Int?
  image_url        String
  is_main          Boolean?           @default(false)
  products         products?          @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  product_variants product_variants[]
}

model product_tax_assignments {
  product_id      Int
  tax_category_id Int
  products        products       @relation(fields: [product_id], references: [id], onUpdate: NoAction)
  tax_categories  tax_categories @relation(fields: [tax_category_id], references: [id], onUpdate: NoAction)

  @@id([product_id, tax_category_id])
}

model product_variants {
  id                     Int                      @id @default(autoincrement())
  product_id             Int
  sku                    String                   @unique @db.VarChar(100)
  price_override         Decimal?                 @db.Decimal(12, 2)
  stock_quantity         Int                      @default(0)
  image_id               Int?
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @db.Timestamp(6)
  inventory_transactions inventory_transactions[]
  order_items            order_items[]
  product_images         product_images?          @relation(fields: [image_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  products               products                 @relation(fields: [product_id], references: [id], onUpdate: NoAction)
}

model products {
  id                      Int                       @id @default(autoincrement())
  store_id                Int
  categoria_id            Int?
  brand_id                Int?
  name                    String                    @db.VarChar(255)
  slug                    String                    @db.VarChar(255)
  description             String?
  base_price              Decimal                   @db.Decimal(12, 2)
  sku                     String?                   @unique @db.VarChar(100)
  stock_quantity          Int?                      @default(0)
  state                   product_state_enum        @default(inactive)
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  inventory_transactions  inventory_transactions[]
  order_items             order_items[]
  product_categories      product_categories[]
  product_images          product_images[]
  product_tax_assignments product_tax_assignments[]
  product_variants        product_variants[]
  brands                  brands?                   @relation(fields: [brand_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  categories              categories?               @relation(fields: [categoria_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  stores                  stores                    @relation(fields: [store_id], references: [id], onUpdate: NoAction)
  reviews                 reviews[]

  @@unique([store_id, slug])
}

model refund_items {
  id            Int         @id @default(autoincrement())
  refund_id     Int
  order_item_id Int
  quantity      Int
  refund_amount Decimal?    @db.Decimal(12, 2)
  reason        String?
  created_at    DateTime?   @default(now()) @db.Timestamp(6)
  order_items   order_items @relation(fields: [order_item_id], references: [id], onUpdate: NoAction)
  refunds       refunds     @relation(fields: [refund_id], references: [id], onUpdate: NoAction)
}

model refunds {
  id                    Int                @id @default(autoincrement())
  order_id              Int
  payment_id            Int?
  customer_id           Int?
  amount                Decimal            @db.Decimal(12, 2)
  currency              String             @db.VarChar(10)
  reason                String?
  state                 refunds_state_enum
  refund_method         String?            @db.VarChar(100)
  refund_transaction_id String?            @unique @db.VarChar(255)
  processed_by_user_id  Int?
  requested_at          DateTime?          @default(now()) @db.Timestamp(6)
  processed_at          DateTime?          @db.Timestamp(6)
  created_at            DateTime?          @default(now()) @db.Timestamp(6)
  updated_at            DateTime?          @default(now()) @db.Timestamp(6)
  refund_items          refund_items[]
  orders                orders             @relation(fields: [order_id], references: [id], onUpdate: NoAction)
  payments              payments?          @relation(fields: [payment_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users                 users?             @relation(fields: [processed_by_user_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
}

model reviews {
  id         Int               @id @default(autoincrement())
  product_id Int?
  user_id    Int?
  rating     Int?
  comment    String?
  state      review_state_enum @default(pending)
  created_at DateTime?         @default(now()) @db.Timestamp(6)
  products   products?         @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users      users?            @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
}

model tax_categories {
  id                      Int                       @id @default(autoincrement())
  store_id                Int?
  name                    String                    @unique @db.VarChar(100)
  description             String?
  product_tax_assignments product_tax_assignments[]
  stores                  stores?                   @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  tax_rates               tax_rates[]
}

model tax_rates {
  id                  Int                @id @default(autoincrement())
  tax_category_id     Int
  store_id            Int?
  country_code        String?            @db.VarChar(3)
  state_province_code String?            @db.VarChar(10)
  postal_code_pattern String?            @db.VarChar(50)
  rate                Decimal            @db.Decimal(6, 5)
  name                String             @db.VarChar(100)
  is_compound         Boolean?           @default(false)
  priority            Int?               @default(0)
  order_item_taxes    order_item_taxes[]
  stores              stores?            @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  tax_categories      tax_categories     @relation(fields: [tax_category_id], references: [id], onUpdate: NoAction)
}

model api_keys {
  id          Int                 @id @default(autoincrement())
  user_id     Int?
  name        String              @db.VarChar(100)
  key_hash    String              @unique
  permissions Json?
  last_used   DateTime?           @db.Timestamp(6)
  expires_at  DateTime?           @db.Timestamp(6)
  status      api_key_status_enum @default(active)
  created_at  DateTime?           @default(now()) @db.Timestamp(6)
  updated_at  DateTime?           @default(now()) @db.Timestamp(6)
  users       users?              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum address_type_enum {
  billing
  shipping
  headquarters
  branch_office
  warehouse
  legal
  store_physical
  home
  work
  contact
  mailing
  residential
  commercial
  pickup
  delivery
  emergency
  temporary
  vacation
  business
}

enum category_state_enum {
  active
  inactive
  archived
}

enum currency_state_enum {
  active
  inactive
  deprecated
}

enum inventory_transaction_type_enum {
  stock_in
  sale
  return
  adjustment_damage
  initial
}

enum order_state_enum {
  created
  pending_payment
  processing
  shipped
  delivered
  cancelled
  refunded
  finished
}

enum payment_method_state_enum {
  enabled
  disabled
  archived
  requires_configuration
}

enum payment_methods_type_enum {
  cash
  card
  paypal
  bank_transfer
}

enum payments_state_enum {
  pending
  succeeded
  failed
  authorized
  captured
  refunded
  partially_refunded
}

enum product_state_enum {
  active
  inactive
  archived
}

enum refunds_state_enum {
  requested
  pending_approval
  approved
  processing
  completed
  failed
  cancelled
}

enum review_state_enum {
  pending
  approved
  rejected
  hidden
  flagged
}

enum user_state_enum {
  active
  inactive
  pending_verification
  suspended
  archived
}

enum http_method_enum {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum permission_status_enum {
  active
  inactive
  deprecated
}

enum organization_state_enum {
  active
  inactive
  suspended
  archived
  draft
}

enum store_type_enum {
  physical
  online
  hybrid
  popup
  kiosko
}

enum api_key_status_enum {
  active
  inactive
  revoked
  expired
}

enum domain_type_enum {
  vendix_core
  organization
  store
  ecommerce
}

enum domain_status_enum {
  pending_dns
  pending_ssl
  active
  disabled
}

enum ssl_status_enum {
  none
  pending
  issued
  error
  revoked
}
